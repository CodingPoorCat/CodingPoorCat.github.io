<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodingPoorCat&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-15T13:03:05.596Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS深度克隆及类型判断</title>
    <link href="http://yoursite.com/2016/03/15/JS%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86%E5%8F%8A%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2016/03/15/JS深度克隆及类型判断/</id>
    <published>2016-03-15T13:02:36.000Z</published>
    <updated>2016-03-15T13:03:05.596Z</updated>
    
    <content type="html">&lt;h1 id=&quot;ife-递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot;&gt;&lt;a href=&quot;#ife-递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot; class=&quot;headerlink&quot; title=&quot;ife 递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot;&gt;&lt;/a&gt;&lt;strong&gt;ife 递归实现深度克隆（内含JS数据类型判断，对象遍历）&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;今天在做2015ife的题时，感觉收获很多，对于js基本类型有了新的认识。把在研究过程中所得记录下来！&lt;br&gt;题目是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝&lt;br&gt;// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先要去判断要克隆的对象的值类型或者引用类型。判断方法有很多种！&lt;br&gt;对于值类型或者引用有4种方法判断&lt;/p&gt;
&lt;h2 id=&quot;1-typeof&quot;&gt;&lt;a href=&quot;#1-typeof&quot; class=&quot;headerlink&quot; title=&quot;1.typeof&quot;&gt;&lt;/a&gt;1.typeof&lt;/h2&gt;&lt;p&gt;但是！js的数值有两种构造方法：直接赋值法和通过值函数构造器构造&lt;br&gt;例如：&lt;br&gt;    &lt;code&gt;var test1 = &amp;quot;string&amp;quot;;
    var test2 = new String(&amp;quot;string2&amp;quot;);
    console.log(typeof test1);//输出string
    console.log(typeof test2);//输出object&lt;/code&gt;&lt;br&gt;对于typeof来说；所有通过构造器constructor产生的变量都是object.那么我们怎么去判断用constructor产生的变量？&lt;/p&gt;
&lt;h2 id=&quot;2-instanceof&quot;&gt;&lt;a href=&quot;#2-instanceof&quot; class=&quot;headerlink&quot; title=&quot;2.instanceof&quot;&gt;&lt;/a&gt;2.instanceof&lt;/h2&gt;&lt;p&gt;instanceof 函数可以判断左边参数是否是右边参数的一个实例！&lt;br&gt;例如：&lt;br&gt;&lt;code&gt;console.log(test2 instanceof String);//输出true&lt;/code&gt;&lt;br&gt;但是！&lt;br&gt;&lt;code&gt;console.log(test1 instanceof String);//输出false&lt;/code&gt;&lt;br&gt;这就很不和谐了！有没有两种都能判断的方法呢？&lt;/p&gt;
&lt;h2 id=&quot;3-Object-prototype-toString-call&quot;&gt;&lt;a href=&quot;#3-Object-prototype-toString-call&quot; class=&quot;headerlink&quot; title=&quot;3.Object.prototype.toString.call()&quot;&gt;&lt;/a&gt;3.Object.prototype.toString.call()&lt;/h2&gt;&lt;p&gt;当然有！MDN在官方教程上就介绍了一种可以判断所有类型的方法！&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用toString()方法来检测对象类型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console.log(Object.prototype.toString.call(test1))//输出[object String]
 console.log(Object.prototype.toString.call(test1))//输出[object String]&lt;/code&gt;&lt;br&gt; 顿时觉得人生豁然开朗了起来！啊~五环！你比四环多一环！&lt;/p&gt;
&lt;h2 id=&quot;4-Object-constructor&quot;&gt;&lt;a href=&quot;#4-Object-constructor&quot; class=&quot;headerlink&quot; title=&quot;4.Object.constructor&quot;&gt;&lt;/a&gt;4.Object.constructor&lt;/h2&gt;&lt;p&gt;在研究MDN 的api文档的时候，发现了constructor方法！However这个方法&lt;br&gt;返回一个指向创建了该对象原型的函数引用。需要注意的是，该属性的值是那个函数本身，&lt;br&gt;而不是一个包含函数名称的字符串！&lt;br&gt;而不是一个包含函数名称的字符串！！&lt;br&gt;而不是一个包含函数名称的字符串！！！&lt;br&gt;对于原始值（如1，true 或 “test”），该属性为只读。&lt;br&gt;所有对象都会从它的原型上继承一个 constructor 属性.&lt;br&gt;所以，虽然可以实现判断，但是还是不用为好！&lt;br&gt;&lt;code&gt;console.log(test1.constructor.toString()==&amp;quot;function String() { [native code] }&amp;quot;)//true;
    console.log(test2.constructor.toString()==&amp;quot;function String() { [native code] }&amp;quot;)//true;&lt;/code&gt;&lt;br&gt;&lt;strong&gt;总结：方法34对于所有值类型和引用类型适用（推荐第三种方法，毕竟官方），第12种方法看情况使用！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 然后来到遍历问题了！&lt;br&gt; &lt;strong&gt;1.字符串的遍历&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`
     var temp = src.split(&amp;quot;&amp;quot;);
        var cloneString=&amp;quot;&amp;quot;;
        for(var i=0;i&amp;lt;temp.length;i++)
        {
             cloneString+=temp[i];
             }

`
原理就是利用split方法将字符串里一个个字母分开（注意里面的参数为空&amp;quot;&amp;quot;,为其他就会以这个参数为标准分离字符串）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;strong&gt;2.数组的遍历&lt;/strong&gt;&lt;br&gt; 使用的是传统的数组遍历&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var temp = new Array();
    for(var i=0,a;a = array[i];i++)
    {
         temp[i] = cloneObject(a);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里遇到了几个坑，先说一下：&lt;br&gt;当使用&lt;br&gt;&lt;code&gt;for(var a in array)&lt;/code&gt;&lt;br&gt;&lt;code&gt;{console.log(a+typeof a)}&lt;/code&gt;&lt;br&gt;得到的值是&lt;br&gt;0 string&lt;br&gt;1 string&lt;br&gt;2 string&lt;br&gt;这种方法并不行&lt;br&gt;还有一个坑就是当使用&lt;br&gt;&lt;code&gt;for(var i=0,a;a = array[i++];)&lt;/code&gt;时&lt;br&gt;i会在a被赋值后就自动增加而不是等到一个循环完成再增加&lt;br&gt;；也就是遍历结果是对的，但是i的数值变化是从1开始而不是从0开始的！&lt;br&gt;在赋值的过程中，我首先使用的是temp.push()方法！但是！push方法会让&lt;br&gt;temp数组新增加的元素的类型为undefined！这不是我想要的结果！我要的是完美克隆，即数组里面对象类型也要和原来的一致。看了MDN的api接口发现解决方法如下：&lt;br&gt;&lt;code&gt;Array.prototype.push.apply(temp,array);&lt;/code&gt;&lt;br&gt; &lt;strong&gt;3.对象的遍历&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var temp = {}; 
           var keys = Object.keys(src);
           // keys 为对象src的键名字数组
           // 它是数组！！！
           for(var i=0,a;a=keys[i];i++)
           {
               temp[a] = cloneObject(src[a]);
           }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对象的遍历，首先获得它的键数组（对象自带的keys()方法），然后再通过键遍历一次值就行了，很简单。&lt;/p&gt;
&lt;p&gt;心得：ife的题真的很能锻炼基础。感谢百度前端技术学院！（这波广告我给自己88分）！多看MDN总会有收获！下面附上我的代码！（请无视里面的吐槽注释还有一些小白的地方）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var cloneObject = function(src){
    var Result;
    switch(Object.prototype.toString.call(src)){
        case &amp;quot;[object Number]&amp;quot;: 
            Result = (typeof src === &amp;quot;object&amp;quot;?new Number(src):parseInt(src.toString()));
            break;
        case &amp;quot;[object String]&amp;quot;:
            // 遍历字符串 =.= 好像没啥意义
            // {
            //     var temp = src.split(&amp;quot;&amp;quot;);
            //     var cloneString=&amp;quot;&amp;quot;;
            //     for(var i=0;i&amp;lt;temp.length;i++)
            //     {
            //         cloneString+=temp[i];
            //     }
            // }
            Result = (typeof src === &amp;quot;object&amp;quot;?new String(src):src.toString());
            break;
        case &amp;quot;[object Boolean]&amp;quot;:
            Result = (typeof src === &amp;quot;Boolean&amp;quot;?new Boolean(src):src);
            break;
        case &amp;quot;[object Date]&amp;quot;:
            Result = new Date(src);
            break;
        case &amp;quot;[object Array]&amp;quot;:
            var temp = new Array();
              // Array.prototype.push.apply(temp,src);
             // 当使用for(var i=0,a;a = src[i++];) i会在a被赋值后就自动增加而不是
             // 等到一个循环完成再增加
            for(var i=0,a;a = src[i];i++)
            {
                  // temp.push(cloneObject(a));
                  // 使用push方法会让数组所有元素的类型变成undfined
                 temp[i] = cloneObject(a);
            }
            Result = temp;
            delete temp;
            break;
        case &amp;quot;[object Object]&amp;quot;:
            var temp = {}; 
            var keys = Object.keys(src);
            // keys 为对象src的键名字数组
            // 它是数组！！！
            for(var i=0,a;a=keys[i];i++)
            {
                temp[a] = cloneObject(src[a]);
            }
            Result = temp;
            delete temp;
            delete keys;
            break;
        default:
            break;
    }
    return Result;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ife-递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot;&gt;&lt;a href=&quot;#ife-递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot; class=&quot;headerlink&quot; title=&quot;ife 递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot;&gt;&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/02/28/hello-world/"/>
    <id>http://yoursite.com/2016/02/28/hello-world/</id>
    <published>2016-02-28T11:59:56.268Z</published>
    <updated>2016-02-28T11:59:56.269Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
