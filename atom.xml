<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodingPoorCat&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-29T14:35:28.532Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CodingPoorCat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript闭包实现原理</title>
    <link href="http://yoursite.com/2016/03/29/JavaScript%E9%97%AD%E5%8C%85%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2016/03/29/JavaScript闭包实现原理/</id>
    <published>2016-03-29T14:34:30.000Z</published>
    <updated>2016-03-29T14:35:28.532Z</updated>
    
    <content type="html">&lt;h1 id=&quot;JavaScript闭包实现原理&quot;&gt;&lt;a href=&quot;#JavaScript闭包实现原理&quot; class=&quot;headerlink&quot; title=&quot;JavaScript闭包实现原理&quot;&gt;&lt;/a&gt;JavaScript闭包实现原理&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： js&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;什么是闭包？&quot;&gt;&lt;a href=&quot;#什么是闭包？&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包？&quot;&gt;&lt;/a&gt;什么是闭包？&lt;/h2&gt;&lt;p&gt;闭包是指有权访问另外一个函数作用域的函数。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么需要闭包？&quot;&gt;&lt;a href=&quot;#为什么需要闭包？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要闭包？&quot;&gt;&lt;/a&gt;为什么需要闭包？&lt;/h2&gt;&lt;p&gt;因为JavaScript没有修饰符（像java的private）,只能通过函数作用域去模拟”私有”这个概念。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;怎么样创建闭包？&quot;&gt;&lt;a href=&quot;#怎么样创建闭包？&quot; class=&quot;headerlink&quot; title=&quot;怎么样创建闭包？&quot;&gt;&lt;/a&gt;怎么样创建闭包？&lt;/h2&gt;&lt;p&gt;创建闭包的常见方式就是在一个函数（外部函数）内返回一个匿名函数，而匿名函数则引用外部函数的私有变量（方法）。这就完成了类似”私有”的功能。&lt;br&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;funtion foo(){
    var private=0;
    return function(){
        console.log(private++);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上代码创建了一个闭包。因此，闭包内的private变量就被闭包”私有”了，该私有变量在闭包生存期间并不会被回收，外部函数访问不了私有变量，因此，只有闭包可以对私有变量进行访问。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//f1是一个闭包
var f1 = foo();
f1();//输出0；
f1();//输出1；
f1();//输出2；
//f2是另外一个闭包，console.log(f1===f2) 输出为false;
var f2 = foo();
f1();//输出0；
f1();//输出1；
f1();//输出2；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从例子可以看到，f1 f2各有各自的私有变量private,两者并不影响。那么闭包是怎么样实现”私有”的呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;闭包的原理&quot;&gt;&lt;a href=&quot;#闭包的原理&quot; class=&quot;headerlink&quot; title=&quot;闭包的原理&quot;&gt;&lt;/a&gt;闭包的原理&lt;/h2&gt;&lt;p&gt;上文说到JavaScript通过函数作用域去模拟”私有”的，那么我们要从作用域链的创建说起。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;foo函数第一次被调用时，会创建一个执行环境（execution context）以及相应的作用域链，并把作用域链赋值给一个特殊的内部属性[Scope]。&lt;/li&gt;
&lt;li&gt;使用this,arguments和其他命名参数初始化函数活动对象（activation object）。作用域链从本函数延伸到全局函数。大概就是这样：&lt;img src=&quot;http://codingpoorcat.github.io/demos/images/1.jpg&quot; alt=&quot;foo创建过程&quot;&gt;&lt;/li&gt;
&lt;li&gt;然后执行到闭包时，同样地进行1.2的步骤，结果就是&lt;strong&gt;闭包将外部函数（foo）的活动对象&lt;/strong&gt;和全局变量对象&lt;strong&gt;添加到它的作用域链上&lt;/strong&gt;。&lt;img src=&quot;http://codingpoorcat.github.io/demos/images/2.jpg&quot; alt=&quot;闭包创建过程&quot;&gt;也正是因为&lt;strong&gt;闭包对外部函数的变量进行引用&lt;/strong&gt;，所以无论外部函数是否存在，外部函数的活动对象都会保存在闭包的作用域链上！在闭包的生存期间，该变量并不会被垃圾回收例程回收。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;总的来说，闭包就是通过作用域链的特性，将外部函数活动变量保存在自身的作用域链上。&lt;br&gt;一：通过外部函数的作用域隔离访问，让除闭包外的其他函数无法访问该变量；&lt;br&gt;二：保持对活动变量的引用来实现私有&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript闭包实现原理&quot;&gt;&lt;a href=&quot;#JavaScript闭包实现原理&quot; class=&quot;headerlink&quot; title=&quot;JavaScript闭包实现原理&quot;&gt;&lt;/a&gt;JavaScript闭包实现原理&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： js&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实现一个简单的$</title>
    <link href="http://yoursite.com/2016/03/22/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84/"/>
    <id>http://yoursite.com/2016/03/22/实现一个简单的/</id>
    <published>2016-03-22T15:56:34.000Z</published>
    <updated>2016-03-22T15:57:13.902Z</updated>
    
    <content type="html">&lt;h1 id=&quot;实现一个简单的Query&quot;&gt;&lt;a href=&quot;#实现一个简单的Query&quot; class=&quot;headerlink&quot; title=&quot;实现一个简单的Query&quot;&gt;&lt;/a&gt;实现一个简单的Query&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： JS JQ&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;前段时间写了一个简单的JQuery$函数，当然是在不使用querySelector的前提下。感觉自己对正则表达式书写，还有dom节点的遍历有了基础的认识。废话不多说，先说一下实现的功能：
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;// 可以通过id获取DOM对象，通过#标示，例如&lt;br&gt;$(“#adom”); // 返回id为adom的DOM对象&lt;/p&gt;
&lt;p&gt;// 可以通过tagName获取DOM对象，例如&lt;br&gt;$(“a”); // 返回第一个&lt;a&gt;对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;// 可以通过样式名称获取DOM对象，例如&lt;br&gt;$(“.classa”); // 返回样式定义包含classa的对象&lt;/p&gt;
&lt;p&gt;// 可以通过attribute匹配获取DOM对象，例如&lt;br&gt;$(“[data-log]”); // 返回包含属性data-log的对象&lt;/p&gt;
&lt;p&gt;$(“[data-time=2015]”); // 返回第一个包含属性data-time且值为2015的对象&lt;/p&gt;
&lt;p&gt;// 可以通过简单的组合提高查询便利性，例如&lt;br&gt;$(“#adom .classa”); // 返回id为adom的DOM所包含的所有子节点中，第一个样式定义包含classa的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;因为有复杂的组合查询，所以解决思路是确定要查询的对象是简单查询还是组合查询。
利用/\b /.test(queryString)去判断查询语句是否有空格
准确来说，是判断一个单词后是否有空格。 例如：“#id .class”,会匹配到#id后的空格，而对于“ .class”则不能匹配到。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;当为简单查询时&quot;&gt;&lt;a href=&quot;#当为简单查询时&quot; class=&quot;headerlink&quot; title=&quot;当为简单查询时&quot;&gt;&lt;/a&gt;当为简单查询时&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;查询规则只有一条。但是却分为：
查询id对象（规则为#+“idName”），
查询class对象(规则为.+“className”)，
查询特定属性对象(规则为[attrName])，
查询特定属性值对象(规则为[arrtName=arrtValue])，
查询tag对象(排除以上规则，剩下的就是查询tag对象)。
因为规则匹配符不同，所以使用switch(str.charAt(0)）,根据匹配规则字符串的第一个字符做判断。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####1.查询id对象。直接利用JS的id选择器。因为id具有唯一性，所以并不需要遍历dom树。####&lt;/p&gt;
&lt;p&gt; &lt;code&gt;case &amp;quot;#&amp;quot;: 
    // 去除id前的&amp;#39;#&amp;#39;字符，获取id值
    name = str.replace(/^#/,&amp;quot;&amp;quot;); 
    return document.getElementById(name);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;####2.查询class对象。####&lt;br&gt;    因为class的不唯一性，所以我们要去遍历dom树，把所有符合规则的dom节点都找到，放进一个数组。这里遍历dom使用的方法是利用js的createNodeIterator()创建一个dom迭代工具遍历dom树。&lt;br&gt;  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;document.createNodeIterator(root, whatToShow, filter)&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;接受的参数有三个：
root:
    遍历树的根节点，即迭代器遍历的起点。
whatToShow：
    迭代器遍历的节点类型，默认是遍历所有节点。可以设置为`NodeFilter.SHOW_ELEMENT`，表示只遍历element节点。
filter:
    节点过滤规则，过滤条件？NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
    然后把符合过滤规则的节点放进一个数组，再返回该数组 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码：&lt;code&gt;case &amp;quot;.&amp;quot;:
                        name = rules[i].replace(/^\./,&amp;quot;&amp;quot;);
                        var Iterator = document.createNodeIterator(parentNodeList[c],NodeFilter.SHOW_ELEMENT,
                        function(node){
                            return new RegExp(&amp;quot;^&amp;quot;+name+&amp;quot;$&amp;quot;).test(node.className)?NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
                        },false);
                        var currentNode;
                        while(currentNode = Iterator.nextNode())
                        {
                            temp.push(currentNode);
                        }
                        break;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;####3.查询特定属性对象。####&lt;br&gt;    对于属性对象，分为只查找属性对象和查找特定属性值对象，用正则表达式检验查询字符串里是否有“=”,有“=”就在dom迭代器的filter里设置过滤规则为：&lt;br&gt;        node.getAttribute(attr)==value&lt;br&gt;    如果没有，则只需要判断是否含有该属性，过滤规则filter设置为：&lt;br&gt;        node.hasAttribute(name)&lt;br&gt;  代码：略&lt;/p&gt;
&lt;p&gt;####4.tag对象。####&lt;br&gt;    对于tag对象，由于是不是复数查询，只需要使用&lt;br&gt;        document.getElementsByTagName(str);&lt;br&gt;    就足够了&lt;/p&gt;
&lt;h2 id=&quot;当为复杂查询时&quot;&gt;&lt;a href=&quot;#当为复杂查询时&quot; class=&quot;headerlink&quot; title=&quot;当为复杂查询时&quot;&gt;&lt;/a&gt;当为复杂查询时&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;    当查询条件为复数条件时，先找出符合最外层查询规则的dom节点，放进parentNodeList数组，以该数组内的节点为遍历起点，搜寻符合第二条查询规则的所有dom节点,清空原parentNodeList数组，将符合第二条查询规则的所有dom节点放进parentNodeList数组，以该数组内的节点为遍历起点，搜寻符合第三条查询规则的所有dom节点...直到查询到符合所有规则的节点
    例如:$（&amp;quot;#id .class i&amp;quot;）
规则一为&amp;quot;#&amp;quot;:
先找出id为id的节点，将该节点放进parentNodeList:[div.id]
规则二为&amp;quot;.&amp;quot;：
以div.id为起点，搜索它的后代节点，后代节点中类名为class的将被放进parentNodeList:[div.class,li.class,span.class]
规则三为tag:
分别以div.class，li.class,span.class为起点，搜索它的后代节点，后代中tag名为i的节点放进parentNodeList[li.class i,span.class i]
后面没有规则了，那么目前的parentNodeList就是我们要寻找的节点。返回parentNodeList。完成查询。
注意事项：
由于id选择器的唯一性，当有$（&amp;quot;.class #id&amp;quot;）这查询条件时（它的确很无聊而且没意义，可是可能有人就愿意这么查）。
    我们以所有的.class节点为起点去查询#id节点,那么每个#id节点就被重复查询了，到时候返回的parentNodeList可能就是[div.id,div.id,div.id](重复的数目是看.class的节点数)。因为重复了很多次，所以要进行一次去重处理。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于代码太长，放在demo里面了&lt;br&gt;&lt;a href=&quot;http://codingpoorcat.github.io//IFE-2016/demos/demo1/utilDemo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;query代码和demo&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现一个简单的Query&quot;&gt;&lt;a href=&quot;#实现一个简单的Query&quot; class=&quot;headerlink&quot; title=&quot;实现一个简单的Query&quot;&gt;&lt;/a&gt;实现一个简单的Query&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： JS JQ&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS深度克隆及类型判断</title>
    <link href="http://yoursite.com/2016/03/15/JS%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86%E5%8F%8A%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2016/03/15/JS深度克隆及类型判断/</id>
    <published>2016-03-15T13:02:36.000Z</published>
    <updated>2016-03-15T13:03:05.596Z</updated>
    
    <content type="html">&lt;h1 id=&quot;ife-递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot;&gt;&lt;a href=&quot;#ife-递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot; class=&quot;headerlink&quot; title=&quot;ife 递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot;&gt;&lt;/a&gt;&lt;strong&gt;ife 递归实现深度克隆（内含JS数据类型判断，对象遍历）&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;今天在做2015ife的题时，感觉收获很多，对于js基本类型有了新的认识。把在研究过程中所得记录下来！&lt;br&gt;题目是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝&lt;br&gt;// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先要去判断要克隆的对象的值类型或者引用类型。判断方法有很多种！&lt;br&gt;对于值类型或者引用有4种方法判断&lt;/p&gt;
&lt;h2 id=&quot;1-typeof&quot;&gt;&lt;a href=&quot;#1-typeof&quot; class=&quot;headerlink&quot; title=&quot;1.typeof&quot;&gt;&lt;/a&gt;1.typeof&lt;/h2&gt;&lt;p&gt;但是！js的数值有两种构造方法：直接赋值法和通过值函数构造器构造&lt;br&gt;例如：&lt;br&gt;    &lt;code&gt;var test1 = &amp;quot;string&amp;quot;;
    var test2 = new String(&amp;quot;string2&amp;quot;);
    console.log(typeof test1);//输出string
    console.log(typeof test2);//输出object&lt;/code&gt;&lt;br&gt;对于typeof来说；所有通过构造器constructor产生的变量都是object.那么我们怎么去判断用constructor产生的变量？&lt;/p&gt;
&lt;h2 id=&quot;2-instanceof&quot;&gt;&lt;a href=&quot;#2-instanceof&quot; class=&quot;headerlink&quot; title=&quot;2.instanceof&quot;&gt;&lt;/a&gt;2.instanceof&lt;/h2&gt;&lt;p&gt;instanceof 函数可以判断左边参数是否是右边参数的一个实例！&lt;br&gt;例如：&lt;br&gt;&lt;code&gt;console.log(test2 instanceof String);//输出true&lt;/code&gt;&lt;br&gt;但是！&lt;br&gt;&lt;code&gt;console.log(test1 instanceof String);//输出false&lt;/code&gt;&lt;br&gt;这就很不和谐了！有没有两种都能判断的方法呢？&lt;/p&gt;
&lt;h2 id=&quot;3-Object-prototype-toString-call&quot;&gt;&lt;a href=&quot;#3-Object-prototype-toString-call&quot; class=&quot;headerlink&quot; title=&quot;3.Object.prototype.toString.call()&quot;&gt;&lt;/a&gt;3.Object.prototype.toString.call()&lt;/h2&gt;&lt;p&gt;当然有！MDN在官方教程上就介绍了一种可以判断所有类型的方法！&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用toString()方法来检测对象类型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console.log(Object.prototype.toString.call(test1))//输出[object String]
 console.log(Object.prototype.toString.call(test1))//输出[object String]&lt;/code&gt;&lt;br&gt; 顿时觉得人生豁然开朗了起来！啊~五环！你比四环多一环！&lt;/p&gt;
&lt;h2 id=&quot;4-Object-constructor&quot;&gt;&lt;a href=&quot;#4-Object-constructor&quot; class=&quot;headerlink&quot; title=&quot;4.Object.constructor&quot;&gt;&lt;/a&gt;4.Object.constructor&lt;/h2&gt;&lt;p&gt;在研究MDN 的api文档的时候，发现了constructor方法！However这个方法&lt;br&gt;返回一个指向创建了该对象原型的函数引用。需要注意的是，该属性的值是那个函数本身，&lt;br&gt;而不是一个包含函数名称的字符串！&lt;br&gt;而不是一个包含函数名称的字符串！！&lt;br&gt;而不是一个包含函数名称的字符串！！！&lt;br&gt;对于原始值（如1，true 或 “test”），该属性为只读。&lt;br&gt;所有对象都会从它的原型上继承一个 constructor 属性.&lt;br&gt;所以，虽然可以实现判断，但是还是不用为好！&lt;br&gt;&lt;code&gt;console.log(test1.constructor.toString()==&amp;quot;function String() { [native code] }&amp;quot;)//true;
    console.log(test2.constructor.toString()==&amp;quot;function String() { [native code] }&amp;quot;)//true;&lt;/code&gt;&lt;br&gt;&lt;strong&gt;总结：方法34对于所有值类型和引用类型适用（推荐第三种方法，毕竟官方），第12种方法看情况使用！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 然后来到遍历问题了！&lt;br&gt; &lt;strong&gt;1.字符串的遍历&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`
     var temp = src.split(&amp;quot;&amp;quot;);
        var cloneString=&amp;quot;&amp;quot;;
        for(var i=0;i&amp;lt;temp.length;i++)
        {
             cloneString+=temp[i];
             }

`
原理就是利用split方法将字符串里一个个字母分开（注意里面的参数为空&amp;quot;&amp;quot;,为其他就会以这个参数为标准分离字符串）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;strong&gt;2.数组的遍历&lt;/strong&gt;&lt;br&gt; 使用的是传统的数组遍历&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var temp = new Array();
    for(var i=0,a;a = array[i];i++)
    {
         temp[i] = cloneObject(a);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里遇到了几个坑，先说一下：&lt;br&gt;当使用&lt;br&gt;&lt;code&gt;for(var a in array)&lt;/code&gt;&lt;br&gt;&lt;code&gt;{console.log(a+typeof a)}&lt;/code&gt;&lt;br&gt;得到的值是&lt;br&gt;0 string&lt;br&gt;1 string&lt;br&gt;2 string&lt;br&gt;这种方法并不行&lt;br&gt;还有一个坑就是当使用&lt;br&gt;&lt;code&gt;for(var i=0,a;a = array[i++];)&lt;/code&gt;时&lt;br&gt;i会在a被赋值后就自动增加而不是等到一个循环完成再增加&lt;br&gt;；也就是遍历结果是对的，但是i的数值变化是从1开始而不是从0开始的！&lt;br&gt;在赋值的过程中，我首先使用的是temp.push()方法！但是！push方法会让&lt;br&gt;temp数组新增加的元素的类型为undefined！这不是我想要的结果！我要的是完美克隆，即数组里面对象类型也要和原来的一致。看了MDN的api接口发现解决方法如下：&lt;br&gt;&lt;code&gt;Array.prototype.push.apply(temp,array);&lt;/code&gt;&lt;br&gt; &lt;strong&gt;3.对象的遍历&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var temp = {}; 
           var keys = Object.keys(src);
           // keys 为对象src的键名字数组
           // 它是数组！！！
           for(var i=0,a;a=keys[i];i++)
           {
               temp[a] = cloneObject(src[a]);
           }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对象的遍历，首先获得它的键数组（对象自带的keys()方法），然后再通过键遍历一次值就行了，很简单。&lt;/p&gt;
&lt;p&gt;心得：ife的题真的很能锻炼基础。感谢百度前端技术学院！（这波广告我给自己88分）！多看MDN总会有收获！下面附上我的代码！（请无视里面的吐槽注释还有一些小白的地方）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var cloneObject = function(src){
    var Result;
    switch(Object.prototype.toString.call(src)){
        case &amp;quot;[object Number]&amp;quot;: 
            Result = (typeof src === &amp;quot;object&amp;quot;?new Number(src):parseInt(src.toString()));
            break;
        case &amp;quot;[object String]&amp;quot;:
            // 遍历字符串 =.= 好像没啥意义
            // {
            //     var temp = src.split(&amp;quot;&amp;quot;);
            //     var cloneString=&amp;quot;&amp;quot;;
            //     for(var i=0;i&amp;lt;temp.length;i++)
            //     {
            //         cloneString+=temp[i];
            //     }
            // }
            Result = (typeof src === &amp;quot;object&amp;quot;?new String(src):src.toString());
            break;
        case &amp;quot;[object Boolean]&amp;quot;:
            Result = (typeof src === &amp;quot;Boolean&amp;quot;?new Boolean(src):src);
            break;
        case &amp;quot;[object Date]&amp;quot;:
            Result = new Date(src);
            break;
        case &amp;quot;[object Array]&amp;quot;:
            var temp = new Array();
              // Array.prototype.push.apply(temp,src);
             // 当使用for(var i=0,a;a = src[i++];) i会在a被赋值后就自动增加而不是
             // 等到一个循环完成再增加
            for(var i=0,a;a = src[i];i++)
            {
                  // temp.push(cloneObject(a));
                  // 使用push方法会让数组所有元素的类型变成undfined
                 temp[i] = cloneObject(a);
            }
            Result = temp;
            delete temp;
            break;
        case &amp;quot;[object Object]&amp;quot;:
            var temp = {}; 
            var keys = Object.keys(src);
            // keys 为对象src的键名字数组
            // 它是数组！！！
            for(var i=0,a;a=keys[i];i++)
            {
                temp[a] = cloneObject(src[a]);
            }
            Result = temp;
            delete temp;
            delete keys;
            break;
        default:
            break;
    }
    return Result;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ife-递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot;&gt;&lt;a href=&quot;#ife-递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot; class=&quot;headerlink&quot; title=&quot;ife 递归实现深度克隆（内含JS数据类型判断，对象遍历）&quot;&gt;&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/02/28/hello-world/"/>
    <id>http://yoursite.com/2016/02/28/hello-world/</id>
    <published>2016-02-28T11:59:56.268Z</published>
    <updated>2016-02-28T11:59:56.269Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
